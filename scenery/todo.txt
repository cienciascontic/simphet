Examine:
    http://jonobr1.github.io/two.js/
    https://github.com/GoodBoyDigital/pixi.js
    Others from html5 game engines (particularly webgl)

Priorities:
    * Performance-test arbitrary events
    * Travis for tests
    ** Unicode font tests - grab strings from every language for testing
    Mouse buttons - are they pointers, like Key?
    Beware of closures! (test speeds, see https://developers.google.com/speed/articles/optimizing-javascript)
    For DOM / jQuery manipulation: https://developers.google.com/speed/articles/javascript-dom
    For transform listeners and changes:
        Notes about marking dirty regions should NEVER change a transform?
        Things may go a bit screwy if event listeners for transforms change the transform?
    Investigate double typed arrays for speed (comared to float typed arrays, less casting?)
    OnOffDragHandler
    Consider having children that don't get stitched, but just added (for speed, imagine particules)
    * Performance: Better event system handling (notification of common changes?)
        Layers could conceivably add a listener to a node with a specific trail reference, instead of doing a dispatch up the tree.
        Looks important for transform changes, since they are firing off 2 dispatchEventWithTransform calls, and it should be much better to notify the layers directly
    Canvas-accurate bounds:
        Speed / performance (#16)
        Handle empty strings / nothing (currently getting NaNs) (#21)
        Find bug that causes the Arial sized string on Mac to return an infinite bound on the right side. (#22)
    Re-enable layer refresh handling for matching (and the optimizations therein)
        With the delayed layer handling, we could conceivably remove the distinction between 'matching' and 'non-matching'
    Accessibility
    Force non-canvas above 'interactive' DOM node
        Need to track lowest DOM-interactive Trail for each Scene.
            null indicates none exists, and represents the far 'after'
            If it moves, we invalidate layering between the old and new points?
            Pass in into the layer strategy, etc. (check for canvas there)
    Flag for skipping dirty region handling and other overhead?
    Mix-ins for drag handler?
    Performance
        Same-arity methods?
        Less temporary objects?
    Testing with hidef canvases

Bugs:
    Dragging and releasing outside of the window
    Gradients don't listen to Colors for changes
    ** Nexus 7 play area cropped
    ***** Things disappear sometimes when the window is large
    *** SimpleDragHandler's parent transform tracking is broken
    Chrome canvas lineWidth with pattern bug (looks like half size?)
    Opacity:
        Cross-layer (#30)
        DOM (#31)
    What happens with a computer with multiple mice? is that handled in the pointer spec?
    Switching renderers in Devious Drag example on iPad causes other objects being dragged to be "dropped"
        Probably causes some sort of enter/exit event?
    Nexus 7 hidef scaling
    Multi-touch stress test is flickery!
    FAMB IE9 mouse handling - remember to check out Scenery copy
    Check Firefox/Safari on Mac event handling on multiple touch events
    Text direction 'rtl' bounds and display difference between canvas / SVG

Tricky areas:
    Gradients / Patterns should not be changed after being passed to a node's fill/stroke, since the SVG def won't change, and we don't set up listeners

Test:
    Color updates (pixel tests)
    Event handling tests (and generalize the event handler)
    DownUpListener
    More pixel tests
    RenderInterval
    Trail transforms
    Test issues (zero-bounds text, etc.)
    Unit tests for common node operations
    Test bounds from canvas accurate method vs computed bounds for Shapes and strokes
    Layering tests
    Text baseline 'middle'

Browsers
    Browser bugs? (get Canary / Aurora / IE10):
        [PATCH CREATED] miterLimit off in Chrome 24.0.1312.52 m
            Submitted as https://bugs.webkit.org/show_bug.cgi?id=108763
            Patch created, see http://www.webkit.org/coding/contributing.html
                * running WebKit layout tests
                    Causes failure in bad-test of WebKit/LayoutTests/fast/canvas/canvas-incremental-repaint.html
                * then bugs + references to http://phet.colorado.edu/files/scenery/tests/browsers/chrome-miter-limit.html
            SVG miterLimit calculation in https://svgwg.org/svg2-draft/painting.html
            Canvas spec note at http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#trace-a-path
        [FIXED IN UPDATE] bevel instead of miter on the "close" part of the hex: Firefox 18.0.1
        [PENDING MAJOR WORK] Chrome 24.0.1312.52 m bug in zooming fillText() -- mobile Safari OK (maybe different from webkit, since it's not antialiased?)
        [TODO] Report rgba alpha precision "bug" - spec says rgba(255,255,255,0.1112049520495820495802495) should not lose any digits on inspection after setting on context
        [UNKNOWN] Firefox quadratic stroke precision handling, and definition of "inflated path" at http://www.whatwg.org/specs/web-apps/current-work/#trace-a-path
            See http://jsfiddle.net/pGrSN/2/ or stroke-endpoint.html
        [UNKNOWN] Firefox Win clearRect seems to be off when transformed (rotation)
            Not present in Ubuntu 12.04 v18 or nightly
        [UNKNOWN] IE9 will take click events on an SVG element with "pointer-events: none", but only if there is nothing "clickable" behind that point
            What is considered "clickable", and will it affect us?
        [UNKNOWN] Firefox (20, Aurora 22) on Mac is not applying mozDash to strokeRect()
        [SUBMITTED] Chrome/Safari seems to cache the charset of loaded JS (unable to override)
            Firefox OK
            Chromium bug: https://code.google.com/p/chromium/issues/detail?id=176694
            WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=110031
            Try using a unicode-escaped quote?
        [REGRESSION] Chrome 27 context.arc( 0, 0, 100, Math.PI / 4, -Math.PI / 2, true );
        [UNKNOWN] Chrome canvas lineWidth with pattern bug (looks like half size?)
        [UNKNOWN] Chrome and Firefox treat painting with 'transparent' differently. see dynamic layering slide
        
        [KNOWN] Chrome XMLSerializer.serializeToString dropping namespaces: https://code.google.com/p/chromium/issues/detail?id=88295
    For canvas, create a drawing function that exhibits all differences?
        Canvas difference examples. Set up simple node.is server to keep track of snapshots.
    measureText for webkit?

Questions for SB (or others):
    Way to side-by-side install Firefox and Aurora?
    Preferred mixin styles?
        One that creates a new prototype?

Questions for team:
    https://travis-ci.org/ for continuous integration?
    Should we allow Node( { center: { x: 3, y: 10 } } ), or is there a better way of handling that? Or is Node( { centerX: 3, centerY: 10 } ) better?

General:
    Review IE10 developers guide: http://msdn.microsoft.com/en-us/library/ie/hh673549(v=vs.85).aspx
    * Email OIT about phet.colorado.edu/scenery
        Investigate GitHub pages instead? See http://forrst.com/posts/GitHub_Pages_gh_pages_branch_as_a_subfolder_wi-4ZT
    Test zooming on browsers
    RenderState - consider stack-based transforms

Code:
    Types in docs (and comments)
    Gruntfile - duplicated defines moved to single variable + references
    var Path = scenery.Path = ....
    scenery.TrailPointer.before( trail )  ?
    ** _supportedRenderers => supportedRenderers? (pushes on this array if shared in the prototype could be bad!)
        getSupportedRenderers()? - fixes much of what we're doing
    Remove Easel references in comparison
    Refactor Trail .compare usage to isBefore / isAfter
    Fast text bounds
    Logging:
        Desired remote logging!
    Debugging:
        See https://developers.google.com/chrome-developer-tools/docs/remote-debugging for Android
        Add option to have a 'debugger' statement execute on a failed assertion?
        http://people.apache.org/~pmuellr/weinre-docs/latest/Home.html
        Add wrapper check in requestAnimationFrame loops with a try{} and print e.stack if it is defined?
    Move snapshot utilities from testbed into Scenery itself
    ** Require.js / Grunt:
        Better packaging?
        * requestAnimationFrame - include by default, or no? run in require.js dynamic? run when compiled outside of scenery?
        Rename main.js to namespace.js? so it's easy to pull require( 'SCENERY/namespace' ) for full API access
        'mangle' off for the standalone/development versions
        require() is failing silently if the dependency is circular. consider throwing an error in that case?
        require() || throw Error( 'bad dependency!' ); -- can't inline, otherwise discovery won't work
            See https://github.com/jrburke/almond/issues/8
    Rename 'main' to something else
        container? domContainer?
    Validation of example HTML, CSS, etc.
    Switch to jQuery 2 (wait for a stable build?)
        How necessary is jQuery? Everything we're doing shouldn't be hitting many edge cases.
    Vet recursive bounds code against empty area

Patterns:
    Ideally, we wouldn't just be able to specify an image that is repeated, but a Scene should work.
        SVG supports arbitrary SVG content under a pattern
        Canvas supports its union type (CanvasImageSource) which includes <img> or <canvas>

Canvas:
    Restricted bounds intersection pruning (also see performance)
        For canvas rendering, how to handle restricted bounds in depthFirstUntil? Generalize, and allow a return flag to indicate not hitting children?
    * Clip shapes that are nested are probably broken - opacity interaction or anything that triggers scratch canvas
    * Handle masking similar to SVG masking? see http://www.w3.org/TR/SVG/masking.html
        Use source-in. Probably a better option than the clipShape, so use clipping for pixel-aligned rectangles, masking for everything else?

DOM:
    [IMPLEMENTATION REMOVED] Hoisting of interactive DOM nodes
        - HoistedDOMLayer that adds (2147483647/2) to its z-index
            Pro:
                layering will work in the browser
            Con:
                splits more layers than necessary
                have to add a listener in the capture phase of the listener to flag the event as hitting the interactive node?
                need to check for 'interactive' flag?
                Events system may need to discard anything in the region of an interactive node's bounds?
        - Either delegate (just set transform) or have inline with just SVG over (with pointer-events)

** SVG: -- important because we can layer DOM nodes properly under SVG
    * SVG clip support (use default clip-rule?) see http://www.w3.org/TR/SVG/masking.html#ClipPathElement
        <clipPath id="clipId"><path d="..."/></clipPath><whatever clip-path="url(#clipId)"/>
        * does it need to be in defs?
    * Domparser and xmlserializer are ie9 for avg fragment support
    *** Highly recommend <image xlink:href="...">, since we can include URL / data URL, nesting works, and we don't pollute the id namespace
        Direct nesting fails in IE9
    * Need to be able to pull bounds out of SVG fragments.
        Should be specified in the SVG element.
    Examine Raphael JS for SVG support and Code.
    Possible SVG Safari issues if bounds aren't whole-pixel?
    Investigate SVG crispEdges to see whether it would be valuable for other renderers

** WebGL:
    Stroke will just be a kite-stroked shape.
        Bring back persistent stroked references, since sharing them is ideal? And mark them as immutable
    Consider storing buffers (or display list references) in Shape instances so we can quickly render things
    Fragment shader for:
        Plain color
        Linear Gradient
        Radial Gradient
        Image
        Pattern
    Investigate FrameBuffer for opacity handling (and caching?)
    Use display lists?
    Examine test code for considerations for implementing Shape.

* Event dispatch:
    ** See inert subtrees at http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#inert-subtrees
    * Hook into browser 'zoom' support? - pinch-to-zoom is different? Maybe we can detect?
    Investigate Event.preventManipulation
    ** MSPointerMove filter since location may not have changed while touch is down!!!
        See http://blogs.msdn.com/b/ie/archive/2011/10/19/handling-multi-touch-and-mouse-input-in-all-browsers.aspx
    ** Handle the actual 'out/over' events properly
    **** Restrict SimpleDragHandler to bounds?
    **** Write a multi-finger pinch-to-zoom/rotate handler that is compatible with the drag handler
        Use SVD finger point code for 3+ fingers -- also this could cause shears, so flag for whether 3+ fingers allowed and for shear
        Option whether to rotate/translate/scale or not (for each)
        Option for bounds restriction on dragged center point
        Option whether to interrupt dragging
        Consider 'active' flag
        Need the ability to get a list of all fingers
        How to deal with mouse-wheel events? Scroll if zoomed in?
    Consider all elements under point: http://msdn.microsoft.com/en-us/library/hh673523.aspx
    * SimpleDragHandler needs an option for increased hit areas for touch
    Indie UI events should be tracked: https://dvcs.w3.org/hg/IndieUI/raw-file/default/src/indie-ui-events.html
    Freeze event handlers, a la the DOM 3 Events spec? Or copy Piccolo?
    Best pattern for handling drags / more persistence? Add listeners directly to finger?
        Standard flags on fingers for whether they are performing an operation? dragging, etc.
        A way to 'cancel' the operation a finger is currently doing, so it can switch to a different one?
    Mouse enter/exit needs to trigger for node add/remove
        Does it make sense to hit-test every frame for this?
        Yes?
    How to hit test against DOM nodes?
    Use cases:
        Zoom / Pinch / Drag with interrupts
        Increased hit areas for touch
        Showing where the fingers are with a display (for projectors)

Accessibility / shadow DOM:
    Peers:
        Only in tab order if visible
    TabOrder object?
    Questions:
        Shape instead of rect to highlight - SVG in front
        tabbable: true, tabbable: false, + tabindex
        TabOrder for scene, or more globally (multiple scene support).
            * Ideally we can have scenes handle it in an isolated way that doesn't affect other scenes
        Delegates could be positioned with latency - every 1-2 seconds.
    For 'accessible' elements, maybe 'interactive' for a tab order? 'tabbable'? 'readable'?
        * magnifier
        CSS styles ('hidden') - tab order?
    see http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html
    ARIA in general?
    see http://www.paciellogroup.com/blog/2011/12/html5-canvas-accessibility-discussions-2009-2011/
        and http://www.paciellogroup.com/blog/2012/09/html5-accessibility-september-2012/
    see html5 scene graph google doc
    see http://www.html5accessibility.com/
    consider something like http://bl.ocks.org/mbostock/1276463
    shadow dom article: http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/
        spec: http://www.w3.org/TR/shadow-dom/

Node:
    * Arbitrary ImageData filters, or filters that match SVG
        Like the colorTransform matrix, applied to node.filters?
    Support for setting listeners in the mutator?
        { inputListeners: [ new SimpleDragHandler() ] }
    Since cursor might support data URLs, we can have custom cursors?
    * A system for cursor handling that also supports dragging or 'persistent' cursor handling
    ** Bounds after rotation seems to be a bit too wide
    * Fire event on change of layerStrategy, and possibly rethink layerStrategy design
    Mix-in notifier for listeners. Backbone?
    Visibility interaction with dirty paint / bounds, and events based on that
        Scene.updateLayer shouldn't be called if only invisible nodes were changed?
    Don't send mark updates on invisible layers? Visibility change causes repaint?
    Function for higher-performance possibly-expanded bounds for redraw?
        Should we have an option so that selfBounds uses this?
    For bounds checking during rendering, isInGlobalBounds( globalBounds, currentTransform ) would help, and shapes could be more specific
    Canvas: masking with sub-canvas rendering using globalCompositeOperation. CSG should be possible, and hit tests should be better. Bounds might be harder

Text:
    Text bounds option to store height per font and update width with measureText
    Unit tests
    Handling multi-line strings
    WebGL options

Scene:
    Spread out z-indices and be adaptive so we don't have to change as many indices where possible

Trail:
    Verify current indexing handling (is it sufficient to just reindex trails on layer refreshes?)
    Cleanup of nestedForwards/nestedBackwards, possibly based on a Side-like implementation. Decent code duplication!
    Better name for copy()? clone()? getCopy()? Possibly use a copy constructor?
    depthFirstUntil should possibly have option for defensive copies of the pointers?

Performance:
    Consider removing switch statements from inner loops? test!
    **** FAMB tab 2 slower after instances-stitch (SVG+CSS)
    Layers / caching:
        **** Consider option that would resize / position canvas/svg elements to smaller portions of the screen for lower memory usage (and possibly better performance?)
            Tiling, possibly lock to every 16 pixels. Prevent back-and-forth every frame, and consider full size for animation vs changing
            Would be setting position (layout change) and possibly width. If we can keep width the same, it may be faster?
            * Also do this for CSS transforms on SVG. Resizing is causing slowness
        * Make RendererOptions its own class with utilities, that can be added?
        Performance hints
            Dynamic, so we could set node.movement = 'dynamic' while moving, node.movement = 'static' while stationary?
            Generalized performance flags, so that each node can vary is renderer / settings based on desired appearance
                quality: 'low' / 'medium' / 'high' ?
                flags like 'moving' or 'stationary' could help for dynamic objects. Scenery would then decide whether to optimize the layers or not
        Transform "caching" should be shared between the CSS / Canvas(local)-based methods
            Deal with making sure we don't have "clipping" of the bounds
        ** Slight bit of rounding if necessary to pixel-aligned integral numbers may get performance benefits
            Option to disallow subpixel handling?
        Canvas / WebGL:
            drawImage is used instead of CSS transforms, but same general model, and we should take the same flags.
            "Global":
                Could combine with the Layer's canvas stack?
                A full scratch canvas wouldn't be able to take care of translations, but would be extremely fast for re-rendering things that didn't change at all.
            "Local":
                Possible to have a single scratch canvas for a Node, even in DAG situations, since RenderState only tracks clipping / opacity (handled already)
        ** WebGL: Caching SVG / Canvas as a texture would allow extremely fast dragging?
            How to allow children to render as a different renderer (canvas?) to then transfer into a texture?
        Proof-of-concept for performance and DOM integration
    * Matching in layering code
    * Consider linked-trails on instances, to take up less memory
    affectedLayers: compare performance with tree inspection (iterate in nested order from each side until we find painted nodes)
        Also even faster to keep this updated in the instances?
    Instances as a linked list in render order could speed up many operations (iterate through instances/trails! between two points!)
    Node option (or standard override) that skips validate bounds and paint, and provides a specific bounds and hit region (and flag for repaint) may speed things up
    V8:
        Optimized too many times:
            Trail: reindex, addDescendant
            Node: validateBounds, invalidateChildBounds, invalidateChildPaint, markOldPaint, trailUnderPoint
            CanvasLayer: internalMarkDirtyBounds
            Bounds2: roundedOut
            Fillable: beforeCanvasFill, afterCanvasFill
            enter / exit (probably Canvas rendering?)
        Non-literal switch label:
            Matrix3.inverted
            Matrix3.getSVGTransform
    Instances:
        *** bottom/top affected layers (store, or do fast traversal)
        Can we make any optimizations based on what renderers a node has?
        Consider descendant count?
    Priorities:
        Layer creation
            SLOW to create Canvas layer on iPad? ALL SELF TIME
            Cache canvases?
        CanvasLayer in render: enter,setTransform slow !!!
        Faster way to do Trail.addDescendant - PASS indices in if we know what they are?
        LayerStrategy enter
        TrailPointer nestedForwards (minor?)
        SVG could potentially mark certain nodes as 'dirty' and only update on the scene render
        Only set CSS3 transform-origin once, on construction? -- create a SceneryStyle for it
        Consider a CanvasAccelerationNode - batches events and should be treated like an opaque rectangle that is dirty or not
        Consider a CanvasCustomNode
            Could it be duplicated? Probably not worth handling for performance? Might not just use this for performance.
            High-performance version (direct canvas access), or low-performance version (blitted on?)
        Disabling bounds / paint tracking where not needed?
            Or just don't ever compute bounds until they are needed? (call validateBounds more often as a result)
        Memory taken up, causing iOS crashes!
        Path boundsMethod - either bounds not needed, or a more inaccurate form (particularly for stroked bounds!)
        Bounds validation and immutable => mutable for lessening GC
        LayerBuilder and LayerStrategy
        TrailPointer's equalsNested, compareNested, nestedForwards
        Better reindexing of layers (don't affect so many, spread the indices out more and do intelligently)
    *** paintCanvas bottleneck?
    *** Garbage collection jitters!
    *** Performance regressions with layering
    * Prune node rendering based on visible dirty bounds
    Consider checking for hotspots and layer changes based on that
        Ref-count number of descendants? Should be fast for insert/remove child
    Not re-rasterizing objects immediately during dragging or other features? (Auto-detect as hotspot maybe?)
    Ensure that we are triggering the hardware acceleration for CSS3 transforms
    Consider model changes in setInterval: http://www.chandlerprall.com/2012/06/requestanimationframe-is-not-your-logics-friend/
    * IE9 performance (possible regression?)
        Get DebugContext to work with Easel for a comparison? Or just compare against vanilla Canvas code
        "strict mode" removal wasn't effective
        Possible that it's the clipping that we are doing?
    Framebuffer with context.drawImage( bufferContext, 0, 0 );
    Consider child counts, so that we can decide which layers to keep in a layer rebuild?
    Piece improvements with direct piece.render calls instead of switch? -- profile
    Improved Dirty regions
        * not full union of bounding boxes
        * Kd-tree / quadtree acceleration if child count is high? 
    Caching nodes with off-screen canvases for performance
        Global-bounds based. Store global transform, so we can (each frame) compare the current transform and see if it is just an
        approximately integer-offset transformation. Then we can render quickly on integer boundaries with no transforms / scaling for speed.
        Consider CSS3 transforms for possibly increased performance compared to drawImage( x, 0, 0 ), as we can do this with anything
        Add RenderState flag that allows using cached handling, or forces a full redraw
    Improve quadratic bezier offset curve computation
    Combining fills and strokes (or other state optimization -- fills require ensuring CCW/CW stays the same, so we need flags to whitelist)
        ! shape strokes happen with linewidth scaled by current transform -- if transforms change scale (or possibly shear), this will break
    Efficiency checks for fullRender using the functional style => imperative
    Automated benchmarks
    Investigate whether bounding boxes can be smaller based on clip shapes
    Non-automated performance tests:
        Compare Matrix3 Float32Array v. Array (Array seems slightly faster possibly?)
        Consider a Canvas 2D context delegate to examine drawing calls for Easel / Scene / Custom / etc.
    Checklists:
        http://www.html5rocks.com/en/tutorials/canvas/performance/
    Consider batching adding/removal of children with layering code
    Consider flag to say "order of children" doesn't matter, so Scenery could minimize number of layers implicitly
    Kite:
        precompile shape render code using 'eval'?

Benchmarks:
    Performance based:
        Add exception handling
        Consider using Local Storage to show previous results?
    Using xStats (https://github.com/bestiejs/xstats.js), also add memory output for verifying lack of memory leaks?

Property / Notifiers:
    Consider Axon

Color:
    *** Switch to straight one-color?

Features:
    AnimateTo-style animation
    Clipping => Dead region handling (clipping needs to be stored in a shape array since it can only be intersected or reset in Canvas)
    Color handling?
    Include MathJax text?
    Property change events for nodes?

Debugging:
    *** Debug layer
        Or just debug out a tree view (using scenery of course).
            Previews inside nodes if hasSelf()
            Show layers and bounds
            Mouse-over shows bounds (possibly recursive), etc.
    Ability to create a debugging dump of scene graph
    Code style should match https://github.com/rwldrn/idiomatic.js

Other:
    Pull requests to underscore.js / LoDash? for FunctionalUtils wishlist ... or fork
    Highlighting and indexing of TODO items
